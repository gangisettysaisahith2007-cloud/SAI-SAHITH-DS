#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key, height;
    struct Node *left, *right;
};

// Get height
int h(struct Node* n){ return n ? n->height : 0; }

// Max function
int max(int a,int b){ return (a>b)?a:b; }

// Create new node
struct Node* newNode(int key){
    struct Node* n=(struct Node*)malloc(sizeof(struct Node));
    n->key=key; n->left=n->right=NULL; n->height=1;
    return n;
}

// Right rotate
struct Node* rightRotate(struct Node* y){
    struct Node* x=y->left; struct Node* T=x->right;
    x->right=y; y->left=T;
    y->height=max(h(y->left),h(y->right))+1;
    x->height=max(h(x->left),h(x->right))+1;
    return x;
}

// Left rotate
struct Node* leftRotate(struct Node* x){
    struct Node* y=x->right; struct Node* T=y->left;
    y->left=x; x->right=T;
    x->height=max(h(x->left),h(x->right))+1;
    y->height=max(h(y->left),h(y->right))+1;
    return y;
}

// Get balance factor
int getBalance(struct Node* n){ return n ? h(n->left)-h(n->right) : 0; }

// Insert into AVL
struct Node* insert(struct Node* node,int key){
    if(!node) return newNode(key);
    if(key<node->key) node->left=insert(node->left,key);
    else if(key>node->key) node->right=insert(node->right,key);
    else return node;

    node->height=1+max(h(node->left),h(node->right));
    int bal=getBalance(node);

    if(bal>1 && key<node->left->key) return rightRotate(node);
    if(bal<-1 && key>node->right->key) return leftRotate(node);
    if(bal>1 && key>node->left->key){ node->left=leftRotate(node->left); return rightRotate(node);}
    if(bal<-1 && key<node->right->key){ node->right=rightRotate(node->right); return leftRotate(node);}
    return node;
}

// Get min value node
struct Node* minNode(struct Node* n){
    while(n->left) n=n->left;
    return n;
}

// Delete from AVL
struct Node* deleteNode(struct Node* root,int key){
    if(!root) return root;
    if(key<root->key) root->left=deleteNode(root->left,key);
    else if(key>root->key) root->right=deleteNode(root->right,key);
    else {
        if(!root->left||!root->right){
            struct Node* tmp=root->left?root->left:root->right;
            if(!tmp){ tmp=root; root=NULL; }
            else *root=*tmp;
            free(tmp);
        } else {
            struct Node* tmp=minNode(root->right);
            root->key=tmp->key;
            root->right=deleteNode(root->right,tmp->key);
        }
    }
    if(!root) return root;

    root->height=1+max(h(root->left),h(root->right));
    int bal=getBalance(root);

    if(bal>1 && getBalance(root->left)>=0) return rightRotate(root);
    if(bal>1 && getBalance(root->left)<0){ root->left=leftRotate(root->left); return rightRotate(root);}
    if(bal<-1 && getBalance(root->right)<=0) return leftRotate(root);
    if(bal<-1 && getBalance(root->right)>0){ root->right=rightRotate(root->right); return leftRotate(root);}
    return root;
}

// Search
int search(struct Node* root,int key){
    if(!root) return 0;
    if(root->key==key) return 1;
    if(key<root->key) return search(root->left,key);
    return search(root->right,key);
}

// Preorder print
void preorder(struct Node* root){
    if(root){ printf("%d ",root->key); preorder(root->left); preorder(root->right); }
}

int main(){
    struct Node* root=NULL;
    root=insert(root,10);
    root=insert(root,20);
    root=insert(root,30);
    root=insert(root,40);
    root=insert(root,50);
    root=insert(root,25);

    printf("Preorder after insertion: ");
    preorder(root);

    root=deleteNode(root,40);
    printf("\nPreorder after deletion: ");
    preorder(root);

    int k=25;
    if(search(root,k)) printf("\nFound %d",k);
    else printf("\nNot Found %d",k);

    return 0;
}
