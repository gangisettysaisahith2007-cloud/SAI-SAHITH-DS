#include <stdio.h>
#define V 5
#define E 7

struct Edge{ int u,v,w; } edges[E]={{0,1,2},{0,3,6},{1,2,3},{1,3,8},{1,4,5},{2,4,7},{3,4,9}};
int parent[V];

int find(int i){ return (parent[i]==i)?i:(parent[i]=find(parent[i])); }
void unionSet(int a,int b){ parent[find(a)]=find(b); }

void kruskal(){
    for(int i=0;i<V;i++) parent[i]=i;
    // sort edges by weight (bubble sort)
    for(int i=0;i<E-1;i++)
        for(int j=0;j<E-i-1;j++)
            if(edges[j].w>edges[j+1].w){
                struct Edge t=edges[j]; edges[j]=edges[j+1]; edges[j+1]=t;
            }
    printf("Edge \tWeight\n");
    for(int i=0,c=0;i<E && c<V-1;i++){
        int u=edges[i].u, v=edges[i].v;
        if(find(u)!=find(v)){
            printf("%d - %d \t%d\n",u,v,edges[i].w);
            unionSet(u,v);
            c++;
        }
    }
}

int main(){
    kruskal();
    return 0;
}
